services:
  # keytool
#  keystore-gen:
#    image: eclipse-temurin:17-jdk   # または openjdk:17-jdk
#    working_dir: /work
#    volumes:
#      - ./PreventForgettingMedicationSpApp/work:/work
#      - ./PreventForgettingMedicationSpApp/secrets:/secrets
    # 初回は対話ありでもOKだが、非対話化が安全。コマンドは起動時に渡す。
#    entrypoint: ["/bin/bash", "-lc"]
    # $$ は compose の変数展開を避け、コンテナ内のシェルで $ に展開させるため
#    command: >
#      test -f /secrets/my-upload-key.jks ||
#      keytool -genkeypair -v -storetype JKS
#      -keystore /secrets/my-upload-key.jks -alias upload
#      -keyalg RSA -keysize 2048 -validity 10000
#      -storepass "$STOREPASS" -keypass "$KEYPASS"
#      -dname "CN=Your Name, OU=Dev, O=YourOrg, L=Tokyo, S=Tokyo, C=JP"
#    environment:
      # 未設定ならエラーにする（.env で渡すのが前提）
#      STOREPASS: ${STOREPASS:?define STOREPASS in .env}
#      KEYPASS: ${KEYPASS:?define KEYPASS in .env}
  # React Native 開発サーバ
  reactnative:
    build:
      context: ./Dockerfile-reactnative
      args:
        APP_NAME: ${APP_NAME}
    container_name: reactnative
    volumes:
      - ./PreventForgettingMedicationSpApp:/PreventForgettingMedicationSpApp
      # 「PreventForgettingMedicationSpApp」を削除して「npx create-expo-app@latest $APP_NAME」を実行した後にコメントを外して再度docker compose upする
      # Expoの設定でGitが必要なため、.gitディレクトリをマウント
#      - ./.git:/PreventForgettingMedicationSpApp/.git
#      - ./Dockerfile-reactnative/credentials.json.example:/tmp/credentials.json.example:ro
#      - ./PreventForgettingMedicationSpApp/android:/home/expo/workingdir/build/android
      #- PreventForgettingMedicationSpApp_node_modules:/PreventForgettingMedicationSpApp/node_modules
      # Gradleのキャッシュを永続化
      - PreventForgettingMedicationSpApp_gradle_cache:/root/.gradle
      - $HOME/Library/Android/sdk:/opt/Android/sdk
    working_dir: /PreventForgettingMedicationSpApp
    command: exec npx expo start --tunnel --no-dev --minify
#    command: >
#      bash -lc '
#        TMP=$(mktemp -d);
#        if [ ! -d "/$APP_NAME/node_modules" ]; then
#          npx --yes create-expo-app@latest "$TMP" --yes;
#          rm -rf "$TMP/.git";
#          cp -rn "$TMP"/. "/$APP_NAME"/;
#        fi
#        if [ ! -f "/$APP_NAME/credentials.json" ]; then
#          envsubst < "/tmp/credentials.json.example" > "/$APP_NAME/credentials.json";
#        fi
#        exec npx expo start --host tunnel --tunnel --no-dev --minify
#      '
    environment:
      APP_NAME: ${APP_NAME}
      # Metro BundlerがホストのIPアドレスを認識できるように設定
      REACT_NATIVE_PACKAGER_HOSTNAME: ${HOST_IP}
      EXPO_DEVTOOLS_LISTEN_ADDRESS: 0.0.0.0
      EXPO_TOKEN: ${EXPO_TOKEN}
      # 未設定ならエラーにする（.env で渡すのが前提）
      STOREPASS: ${STOREPASS:?define STOREPASS in .env}
      KEYPASS: ${KEYPASS:?define KEYPASS in .env}
      JAVA_HOME: ${JAVA_HOME:?define JAVA_HOME in .env}
      TZ: Asia/Tokyo
    ports:
      - "8081:8081"
      - "8082:8082"
      # ADBサーバー用のポートフォワーディング
      - "5037:5037"
      - "19000:19000"
      - "19001:19001"
      - "19002:19002"
    tty: true
    stdin_open: true
#    depends_on:
#      - android_emulator

  # Android エミュレータ（VNC+ADB）
#  android_emulator:
#    image: dorowu/docker-android-x86-13.0
#    container_name: android_emulator
#    privileged: true            # KVM の代替として必要
#    environment:
#      <<: *common-env
#      DEVICE: "pixel_4"
#      HTTP_PROXY: ""
#      HTTPS_PROXY: ""
#      # 任意の追加設定例
#      # EMULATOR_ARGS: "-camera-back none -no-window"
#    ports:
#      - "6080:6080"             # noVNC (ブラウザ表示)
#      - "5554:5554"             # ADB (emulator)
#      - "5555:5555"             # ADB (emulator)
#    shm_size: "2g"
#    networks:
#      - devnet

  # Windows ユーティリティ ビルダー（Electron + Wine）
#  electron:
#    platform: linux/amd64
#    image: electronuserland/builder:wine-mono
#    container_name: electron
#    volumes:
#      - ./QRcodeDataReceivingApp:/QRcodeDataReceivingApp
#      - ./Dockerfile-electron/setup.sh:/usr/local/bin/setup.sh:ro
#    working_dir: /QRcodeDataReceivingApp
#    entrypoint: ["bash", "/usr/local/bin/setup.sh"]
    #command: bash -lc "yarn install && yarn electron:make"
    #command: ["yarn", "electron:make"]
#    environment:
#      <<: *common-env
#    networks:
#      - devnet
#networks:
#  devnet:
#    driver: bridge
volumes:
  #PreventForgettingMedicationSpApp_node_modules:
  PreventForgettingMedicationSpApp_gradle_cache: